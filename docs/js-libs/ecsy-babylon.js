!function(e,t){"use strict";class Transform{constructor(){this.position={x:0,y:0,z:0},this.rotation={x:0,y:0,z:0},this.scale={x:1,y:1,z:1}}}class Camera{constructor(){this.options={}}}var s,i,r,n,a,o,c,h,m;!function(e){e.Box="Box",e.Plane="Plane",e.Sphere="Sphere",e.Ground="Ground"}(s||(s={}));class Mesh{constructor(){this.type=s.Box,this.options={}}}!function(e){e.Point="Point",e.Directional="Directional",e.Spot="Spot",e.Hemispheric="Hemispheric"}(i||(i={}));class Light{constructor(){this.type=i.Hemispheric,this.direction={x:0,y:0,z:0}}}class Material{constructor(){this.diffuse="#ffffff"}}!function(e){e.Point="Point",e.Box="Box",e.Sphere="Sphere",e.DirectedSphere="DirectedSphere",e.Hemisphere="Hemisphere",e.Cylinder="Cylinder",e.DirectedCylinder="DirectedCylinder",e.Cone="Cone"}(r||(r={}));class Particle{constructor(){this.type=r.Point,this.capacity=100,this.emitter={x:0,y:0,z:0},this.direction1={x:0,y:0,z:0},this.direction2={x:0,y:10,z:10}}}!function(e){e.babylon="Babylon"}(n||(n={}));class Asset{constructor(){this.type=n.babylon}}function d(t){return e.Angle.FromDegrees(t).radians()}function l(e){return e.world}function u(e){e.object&&e.object.dispose()}function p(e,t){return l(e).getSystems().find(e=>void 0!==e.activeScene).getScene(t)}function g(t){return new e.Vector3(t.x,t.y,t.z)}function y(t){return e.Color3.FromHexString(t)}function f(t,s,i){Object.keys(s).forEach(r=>{let n=s[r],a=new e.Texture(n.url,p(i,t.sceneName));Object.keys(n).filter(e=>"url"===e).forEach(e=>{a[e]=n[e]}),t.object[`${r}Texture`]&&u(t.object[`${r}Texture`]),t.object[`${r}Texture`]=a})}function S(e,t){if(t.object){let s=t.object;s.position&&(s.position=g(e.position)),s.rotation&&s.rotation.set(d(e.rotation.x),d(e.rotation.y),d(e.rotation.z)),s.scaling&&(s.scaling=g(e.scale))}}class GameSystem extends t.System{constructor(){super(...arguments),this.scenes=new Map,this._lastTime=0,this._isRendering=!1}get activeScene(){return this._activeScene}init(){this._render=this._render.bind(this)}execute(){this.queries.camera.added.forEach(t=>{let s=t.getComponent(Camera),i=this.getScene(s.sceneName);s.object=new e.VRExperienceHelper(i,s.options),i===this._activeScene&&(this._isRendering=!0)}),this.queries.camera.removed.forEach(e=>{let t=e.getComponent(Camera);u(t),this.getScene(t.sceneName)===this._activeScene&&(this._isRendering=!1)})}start(t,s,i,r){return this.engine=new e.Engine(t,s,i,r),this._lastTime=performance.now(),this.engine.runRenderLoop(this._render),this}getScene(e){return e?this.scenes.get(e):this._activeScene}addScene(t,s){let i=new e.Scene(this.engine,s);return this.scenes.set(t,i),1===this.engine.scenes.length&&(this._activeScene=i),this}_render(){let e=performance.now();l(this).execute(e-this._lastTime,e),this._isRendering&&l(this).enabled&&this._activeScene.render(),this._lastTime=e}}GameSystem.queries={camera:{components:[Camera],listen:{added:!0,removed:!0}}};class TransformSystem extends t.System{init(){window.addEventListener("load",()=>{this.queries.object.results.forEach(e=>{this._updateTransform(e.getComponent(Transform),e.getComponents())})})}execute(){this.queries.object.changed.forEach(e=>{this._updateTransform(e.getComponent(Transform),e.getComponents())})}_updateTransform(e,t){Object.keys(t).filter(e=>void 0!==t[e].object).forEach(s=>S(e,t[s]))}}TransformSystem.queries={object:{components:[Transform],listen:{changed:[Transform]}}};class MeshSystem extends t.System{execute(){this.queries.mesh.added.forEach(t=>{let s=t.getComponent(Mesh);s.object=e.MeshBuilder[`Create${s.type}`].call(null,s.type,s.options,p(this,s.sceneName))}),this.queries.mesh.removed.forEach(e=>{u(e.getComponent(Mesh))})}}MeshSystem.queries={mesh:{components:[Mesh],listen:{added:!0,removed:!0}}},function(e){e.specular="specular"}(a||(a={})),function(e){e.direction="direction"}(o||(o={}));class LightSystem extends t.System{execute(){this.queries.light.added.forEach(t=>{let s=t.getComponent(Light),r=g(s.direction),n=p(this,s.sceneName);switch(s.type){case i.Point:s.object=new e.PointLight(s.type,e.Vector3.Zero(),n);break;case i.Directional:s.object=new e.DirectionalLight(s.type,r,n);break;case i.Spot:s.object=new e.SpotLight(s.type,e.Vector3.Zero(),r,d(s.angle),s.exponent,n);break;case i.Hemispheric:s.object=new e.HemisphericLight(s.type,r,n)}this._updateLight(s)}),this.queries.light.changed.forEach(e=>{this._updateLight(e.getComponent(Light))}),this.queries.light.removed.forEach(e=>{u(e.getComponent(Light))})}_updateLight(e){let t=e.object;Object.keys(e).forEach(s=>{a[s]?t[s]=y(e[s]):o[s]?t[s]=g(e[s]):t[s]=e[s]})}}LightSystem.queries={light:{components:[Light],listen:{added:!0,removed:!0,changed:!0}}},function(e){e.diffuse="diffuse",e.specular="specular",e.emissive="emissive",e.ambient="ambient"}(c||(c={}));class MaterialSystem extends t.System{execute(){this.queries.meshMaterial.added.forEach(t=>{let s=t.getComponent(Material);s.object=new e.StandardMaterial(s.diffuse,p(this,s.sceneName)),this._updateMaterial(s),t.getComponent(Mesh).object.material=s.object}),this.queries.meshMaterial.changed.forEach(e=>{this._updateMaterial(e.getComponent(Material))}),this.queries.meshMaterial.removed.forEach(e=>{u(e.getComponent(Material)),e.getComponent(Mesh).object.material=null})}_updateMaterial(e){let t=e.object;Object.keys(e).forEach(s=>{c[s]?t[`${s}Color`]=y(e[s]):"texture"===s?e.texture&&f(e,e.texture,this):t[s]=e[s]})}}MaterialSystem.queries={meshMaterial:{components:[Mesh,Material],listen:{added:!0,removed:!0,changed:[Material]}}},function(e){e.textureMask="textureMask"}(h||(h={})),function(e){e.emitter="emitter",e.direction1="direction1",e.direction2="direction2"}(m||(m={}));class ParticleSystem extends t.System{execute(){this.queries.particle.added.forEach(t=>{let s=t.getComponent(Particle);s.object=new e.ParticleSystem(s.type,s.capacity,p(this,s.sceneName));let i=s.object;switch(s.type){case r.Point:i.createPointEmitter(g(s.direction1),g(s.direction2));break;case r.Box:i.createBoxEmitter(g(s.direction1),g(s.direction2),g(s.minEmitBox),g(s.maxEmitBox));break;case r.Sphere:i.createSphereEmitter(s.radius,s.radiusRange);break;case r.DirectedSphere:i.createDirectedSphereEmitter(s.radius,g(s.direction1),g(s.direction2));break;case r.Hemisphere:i.createHemisphericEmitter(s.radius,s.radiusRange);break;case r.Cylinder:i.createCylinderEmitter(s.radius,s.height,s.radiusRange,Math.random());break;case r.DirectedCylinder:i.createDirectedCylinderEmitter(s.radius,s.height,s.radiusRange,g(s.direction1),g(s.direction2));break;case r.Cone:i.createConeEmitter(s.radius,s.angle)}this._updateParticle(s),i.start()}),this.queries.particle.changed.forEach(e=>{this._updateParticle(e.getComponent(Particle))}),this.queries.particle.removed.forEach(e=>{let t=e.getComponent(Particle);t.object.stop(),u(t)})}_updateParticle(t){let s=t.object;Object.keys(t).forEach(i=>{m[i]?s[i]=g(t[i]):h[i]?s[i]=function(t){return e.Color4.FromHexString(t)}(t[i]):"texture"===i?t.texture&&f(t,t.texture,this):s[i]=t[i]})}}ParticleSystem.queries={particle:{components:[Particle],listen:{added:!0,changed:!0,removed:!0}}};class AssetSystem extends t.System{execute(){this.queries.asset.added.forEach(t=>{let s=t.getComponent(Asset);switch(this.assetManager||(this.assetManager=new e.AssetsManager(p(this,s.sceneName))),this.assetManager.useDefaultLoadingScreen=!1,s.type){case n.babylon:{let e=s.url.lastIndexOf("/")+1;this.assetManager.addMeshTask(s.type,"",s.url.substring(0,e),s.url.substring(e,s.url.length)).onSuccess=e=>{s.object=e.loadedMeshes[0],S(t.getComponent(Transform),s)};break}}this.assetManager.load()}),this.queries.asset.removed.forEach(e=>{u(e.getComponent(Asset))})}}AssetSystem.queries={asset:{components:[Transform,Asset],listen:{added:!0,removed:!0}}};var b=Object.freeze({__proto__:null,GameSystem:GameSystem,TransformSystem:TransformSystem,MeshSystem:MeshSystem,LightSystem:LightSystem,MaterialSystem:MaterialSystem,ParticleSystem:ParticleSystem,AssetSystem:AssetSystem,Transform:Transform,Camera:Camera,get MeshTypes(){return s},Mesh:Mesh,get LightTypes(){return i},Light:Light,Material:Material,get ParticleTypes(){return r},Particle:Particle,get AssetTypes(){return n},Asset:Asset});window.EB=b}(BABYLON,ECSY);
