import{Angle as e,Vector3 as t,Color3 as n,Color4 as i,VRExperienceHelper as r,Engine as s,Scene as o,AssetsManager as a,MeshBuilder as c,HemisphericLight as h,SpotLight as d,DirectionalLight as l,PointLight as u,StandardMaterial as m,ParticleSystem as p}from"./babylon.module.js";import{System as g}from"./ecsy.module.js";function f(t){return e.FromDegrees(t).radians()}function y(t){return e.FromRadians(t).degrees()}function b(e){return e.world}function C(e){e.object&&e.object.dispose()}function S(e){return b(e).getSystems().find(e=>e.engine)}function _(e,t){return S(e).getScene(t)}function x(e,t){return S(e).getAssetManager(t)}function M(e){return S(e).activeCameraEntity}function E(e){return new t(e.x,e.y,e.z)}function j(e){return new t(f(e.x),f(e.y),f(e.z))}function v(e){return{x:e.x,y:e.y,z:e.z}}function w(e){return{x:e.x,y:e.y,z:e.z}}function P(e){return n.FromHexString(e)}function q(e){return i.FromHexString(e)}function B(e,t,n){for(let i in t){let r=t[i];n.addTextureTask(i,r.url).onSuccess=t=>{let n=t.texture;for(let e in r)"url"!==e&&(n[e]=r[e]);let s=`${i}Texture`,o=e.object;o[s]&&C(o[s]),o[s]=n}}n.load(),n.reset()}function k(e){let t=e.getComponents(),n=[];for(let e in t)t[e].object&&n.push(t[e]);return n}function T(e,t){t.forEach(t=>{let n=t.object;n.position&&(n.position=E(e.position)),n.rotation&&(n.rotation=j(e.rotation)),n.scaling&&(n.scaling=E(e.scale))})}function L(e,t){e.object[t]=e[t]}function R(e,t){e.object[t]=E(e[t])}function N(e,t,n){return e&&t&&n?{x:e,y:t,z:n}:{x:0,y:0,z:0}}class Transform{constructor(){this.position=N(),this.rotation=N(),this.scale=N(1,1,1),this.updateObjects=!0}}class Camera{constructor(){this.options={}}}var D,V,A,H,I,O,z;!function(e){e.Box="Box",e.Plane="Plane",e.Sphere="Sphere",e.Ground="Ground"}(D||(D={}));class Mesh{constructor(){this.type=D.Box,this.options={}}}!function(e){e.Point="Point",e.Directional="Directional",e.Spot="Spot",e.Hemispheric="Hemispheric"}(V||(V={}));class Light{constructor(){this.type=V.Hemispheric,this.direction=N()}}class Material{constructor(){var e;this.color=e?{diffuse:e}:{diffuse:"#ffffff"}}}!function(e){e.Point="Point",e.Box="Box",e.Sphere="Sphere",e.DirectedSphere="DirectedSphere",e.Hemisphere="Hemisphere",e.Cylinder="Cylinder",e.DirectedCylinder="DirectedCylinder",e.Cone="Cone"}(A||(A={}));class Particle{constructor(){this.type=A.Point,this.capacity=100,this.emitter=N(),this.direction1=N(),this.direction2=N(10,10,10),this.minEmitBox=N(),this.maxEmitBox=N()}}!function(e){e.Babylon="Babylon"}(H||(H={}));class Asset{constructor(){this.type=H.Babylon}}!function(e){e.Keyboard="Keyboard",e.VrRight="VrRight",e.VrLeft="VrLeft"}(I||(I={}));class Input{constructor(){this.type=I.VrRight}}class GameSystem extends g{constructor(){super(...arguments),this._scenes=new Map,this._assetManagers=new Map,this._isRendering=!1}get activeSceneName(){return this._activeSceneName}get activeCameraEntity(){return this._activeCameraEntity}init(){this._render=this._render.bind(this)}execute(){this.queries.camera.added.forEach(e=>{let t=e.getComponent(Camera),n=this.getScene(t.sceneName);t.object=new r(n,t.options),n===this._activeScene&&(this._activeCameraEntity=e,this._isRendering=!0)}),this.queries.camera.removed.forEach(e=>{let t=e.getComponent(Camera);C(t),this.getScene(t.sceneName)===this._activeScene&&(this._isRendering=!1)})}start(e,t,n,i){return this.engine=new s(e,t,n,i),this.engine.runRenderLoop(this._render),this}addScene(e,t){let n=new o(this.engine,t),i=new a(n);return i.useDefaultLoadingScreen=!1,this._scenes.set(e,n),this._assetManagers.set(e,i),1===this.engine.scenes.length&&(this._activeScene=n,this._activeSceneName=e),this}removeScene(e){return e!==this.activeSceneName&&this.getScene(e).dispose(),this}switchScene(e,t){return this.getScene(e)&&(this._activeScene=this.getScene(e),this._activeSceneName=e,this._activeCameraEntity=t),this}getScene(e){return e?this._scenes.get(e):this._activeScene}getAssetManager(e){let t=this.activeSceneName;return e&&(t=e),this._assetManagers.get(t)}_render(){b(this).execute(this.engine.getDeltaTime(),performance.now()),this._isRendering&&b(this).enabled&&this._activeScene.render()}}GameSystem.queries={camera:{components:[Camera],listen:{added:!0,removed:!0}}};class TransformSystem extends g{init(){window.addEventListener("load",()=>{this.queries.object.results.forEach(e=>{e.getComponent(Transform).updateObjects&&T(e.getComponent(Transform),k(e))})})}execute(){this.queries.object.changed.forEach(e=>{e.getComponent(Transform).updateObjects&&T(e.getComponent(Transform),k(e))})}}TransformSystem.queries={object:{components:[Transform],listen:{changed:[Transform]}}};class MeshSystem extends g{execute(){this.queries.mesh.added.forEach(e=>{let t=e.getComponent(Mesh);t.object=c[`Create${t.type}`].call(this,t.type,t.options,_(this,t.sceneName))}),this.queries.mesh.changed.forEach(e=>{let t=e.getMutableComponent(Mesh);for(let e in t)L(t,e)}),this.queries.mesh.removed.forEach(e=>{C(e.getComponent(Mesh))})}}MeshSystem.queries={mesh:{components:[Mesh],listen:{added:!0,removed:!0,changed:[Mesh]}}};class LightSystem extends g{execute(){this.queries.light.added.forEach(e=>{let n=e.getComponent(Light),i=E(n.direction),r=_(this,n.sceneName);switch(n.type){case V.Point:n.object=new u(n.type,t.Zero(),r);break;case V.Directional:n.object=new l(n.type,i,r);break;case V.Spot:n.object=new d(n.type,t.Zero(),i,f(n.angle),n.exponent,r);break;default:n.object=new h(V.Hemispheric,i,r)}this._updateLight(n)}),this.queries.light.changed.forEach(e=>{this._updateLight(e.getComponent(Light))}),this.queries.light.removed.forEach(e=>{C(e.getComponent(Light))})}_updateLight(e){for(let t in e)switch(t){case"direction":R(e,t);break;case"color":this._updateColor(e,e.color);break;default:L(e,t)}}_updateColor(e,t){for(let n in t)e.object[n]=P(t[n])}}LightSystem.queries={light:{components:[Light],listen:{added:!0,removed:!0,changed:[Light]}}};class MaterialSystem extends g{execute(){this.queries.meshMaterial.added.forEach(e=>{let t=e.getComponent(Material);t.object=new m(t.color.diffuse,_(this,t.sceneName)),this._updateMaterial(t),e.getComponent(Mesh).object.material=t.object}),this.queries.meshMaterial.changed.forEach(e=>{this._updateMaterial(e.getComponent(Material))}),this.queries.meshMaterial.removed.forEach(e=>{C(e.getComponent(Material)),e.getComponent(Mesh).object.material=null})}_updateMaterial(e){for(let t in e)switch(t){case"color":this._updateColor(e,e.color);break;case"texture":B(e,e.texture,x(this,e.sceneName));break;default:L(e,t)}}_updateColor(e,t){for(let n in t)e.object[`${n}Color`]=P(t[n])}}MaterialSystem.queries={meshMaterial:{components:[Mesh,Material],listen:{added:!0,removed:!0,changed:[Material]}}};class ParticleSystem extends g{execute(){this.queries.particle.added.forEach(e=>{let t=e.getComponent(Particle);t.object=new p(t.type,t.capacity,_(this,t.sceneName));let n=t.object;switch(t.type){case A.Point:n.createPointEmitter(E(t.direction1),E(t.direction2));break;case A.Box:n.createBoxEmitter(E(t.direction1),E(t.direction2),E(t.minEmitBox),E(t.maxEmitBox));break;case A.Sphere:n.createSphereEmitter(t.radius,t.radiusRange);break;case A.DirectedSphere:n.createDirectedSphereEmitter(t.radius,E(t.direction1),E(t.direction2));break;case A.Hemisphere:n.createHemisphericEmitter(t.radius,t.radiusRange);break;case A.Cylinder:n.createCylinderEmitter(t.radius,t.height,t.radiusRange,Math.random());break;case A.DirectedCylinder:n.createDirectedCylinderEmitter(t.radius,t.height,t.radiusRange,E(t.direction1),E(t.direction2));break;case A.Cone:n.createConeEmitter(t.radius,t.angle)}this._updateParticle(t),n.start()}),this.queries.particle.changed.forEach(e=>{this._updateParticle(e.getComponent(Particle))}),this.queries.particle.removed.forEach(e=>{let t=e.getComponent(Particle);t.object.stop(),C(t)})}_updateParticle(e){for(let t in e)switch(t){case"emitter":case"direction1":case"direction2":case"minEmitBox":case"maxEmitBox":R(e,t);break;case"texture":B(e,e.texture,x(this,e.sceneName));break;case"color":this._updateColor(e,e.color);break;default:L(e,t)}}_updateColor(e,t){for(let n in t)e.object[n]=q(t[n])}}ParticleSystem.queries={particle:{components:[Particle],listen:{added:!0,removed:!0,changed:[Particle]}}};class AssetSystem extends g{execute(){this.queries.asset.added.forEach(e=>{let t=e.getComponent(Asset),n=x(this,t.sceneName);t.type,this._loadBabylon(e.getComponent(Transform),t,n),n.load(),n.reset()}),this.queries.asset.removed.forEach(e=>{C(e.getComponent(Asset))})}_loadBabylon(e,t,n){let i=t.url.lastIndexOf("/")+1;n.addMeshTask(H.Babylon,"",t.url.substring(0,i),t.url.substring(i,t.url.length)).onSuccess=n=>{t.object=n.loadedMeshes[0],e&&T(e,[t])}}}AssetSystem.queries={asset:{components:[Asset],listen:{added:!0,removed:!0}}},function(e){e.onMainButton="onMainButton",e.onPad="onPad",e.onSecondaryButton="onSecondaryButton",e.onTrigger="onTrigger"}(O||(O={})),function(e){e.onPadValues="onPadValues"}(z||(z={}));class InputSystem extends g{constructor(){super(...arguments),this._isControllerConntected=!1}execute(){this.queries.input.added.forEach(e=>{let t=e.getComponent(Input);switch(t.type){case I.Keyboard:t.onKey&&(window.addEventListener("keydown",e=>t.onKey.call(t,e.key,!0,!1)),window.addEventListener("keyup",e=>t.onKey.call(t,e.key,!1,!0)));break;default:e.hasComponent(Transform)&&(e.getMutableComponent(Transform).updateObjects=!1)}}),this.queries.input.results.forEach(e=>{let t=M(this).getComponent(Camera).object.webVRCamera.controllers,n=e.getMutableComponent(Input);t.length>0&&(this._isControllerConntected?this._updateObjectsTransform(e,n.object,e.getMutableComponent(Transform)):this._initVRController(n,t))})}_initVRController(e,t){e.type===I.VrLeft?e.object=this._getVRController(t,"left"):e.object=this._getVRController(t,"right"),this._bindControllerBehaviours(e),this._isControllerConntected=!0}_getVRController(e,t){return e.find(e=>e.hand===t)}_bindControllerBehaviours(e){for(let t in e)e[t]&&(t in O&&e.object[`${t}StateChangedObservable`].add(n=>{e[t].call(e,n.pressed,n.touched,n.value)}),t in z&&e.object[`${t}ChangedObservable`].add(n=>{e[t].call(e,n.x,n.y)}))}_updateObjectsTransform(e,t,n){n&&k(e).filter(e=>!(e instanceof Input)).forEach(e=>{let i=t.devicePosition,r=t.deviceRotationQuaternion.toEulerAngles(),s=e.object;s.position&&(s.position=i),s.rotation&&(s.rotation=r),s.scaling&&(s.scaling=E(n.scale)),n.position=v(i),n.rotation=w(r)})}}InputSystem.queries={input:{components:[Input],listen:{added:!0}}};export{Asset,AssetSystem,H as AssetTypes,Camera,GameSystem,Input,InputSystem,I as InputTypes,Light,LightSystem,V as LightTypes,Material,MaterialSystem,Mesh,MeshSystem,D as MeshTypes,Particle,ParticleSystem,A as ParticleTypes,Transform,TransformSystem,f as degreeToRadians,x as getAssetManager,M as getCamera,_ as getScene,P as hexToColor3,q as hexToColor4,y as radiansToDegree,v as vector3ToXyz,w as vector3ToXyzDegree,E as xyzToVector3,j as xyzToVector3Radians};
